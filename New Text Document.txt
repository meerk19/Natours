const Tour = require('../models/tourModels');

const aliasTopTours = (req, res, next) => {
  req.query.limit = '5';
  req.query.sort = '-ratingsAverage,price';
  req.query.fields = 'name,price,summary';
  next();
};

const getAllTour = async (req, res) => {
  try {
    const queryObj = { ...req.query };
    const excludedFields = ['page', 'sort', 'limit', 'fields'];
    excludedFields.forEach((el) => delete queryObj[el]);

    let queryStr = JSON.stringify(queryObj);
    queryStr = queryStr.replace(/\b(gte|gt|lte|lt)\b/g, (match) => `$${match}`);

    let que = Tour.find(JSON.parse(queryStr));

    if (req.query.sort) {
      const sortBy = req.query.sort.split(',').join(' ');
      que = que.sort(sortBy);
    } else {
      que = que.sort('createdAt');
    }

    if (req.query.fields) {
      const fields = req.query.fields.split(',').join(' ');
      que = que.select(fields);
    } else {
      que = que.select('-__v');
    }

    const page = req.query.page * 1 || 1;
    const limit = req.query.limit * 1 || 100;
    const skip = (page - 1) * limit;
    que = que.skip(skip).limit(limit);


    if (req.query.page) {
      const numTour = await Tour.countDocuments();
      if (skip >= numTour) {
        throw new Error('Doesnot Exist');
      }
    }
    
    const tours = await que;
    res
      .status(200)
      .json({ status: 'sucess', results: tours.length, data: { tours } });
  } catch (err) {
    res.status(404).json({ status: 'failed', message: err });
  }
};

const tourById = async (req, res) => {
  try {
    const tours = await Tour.findById(req.params.id);
    res.status(200).json({ status: 'sucess', data: { tours } });
  } catch (err) {
    res.status(404).json({ status: 'failed', message: err });
  }
};

const createTour = async (req, res) => {
  try {
    const newTour = await Tour.create(req.body);
    res.status(200).json({ status: 'sucess', data: { tour: newTour } });
  } catch (err) {
    res.status(404).json({ status: 'error', message: err });
  }
};

const updateTour = async (req, res) => {
  try {
    const tour = await Tour.findByIdAndUpdate(req.params.id, req.body, {
      new: true,
      runValidators: true,
    });

    res.status(200).json({
      status: 'success',
      data: {
        tour,
      },
    });
  } catch (err) {
    res.status(404).json({
      status: 'fail',
      message: err,
    });
  }
};
const deleteTour = async (req, res) => {
  try {
    Tour.findByIdAndDelete(req.params.id);

    res.status(200).json({
      status: 'success',
      data: null,
    });
  } catch (err) {
    res.status(404).json({
      status: 'fail',
      message: err,
    });
  }
};

module.exports = {
  getAllTour,
  tourById,
  createTour,
  updateTour,
  deleteTour,
  aliasTopTours,
};
